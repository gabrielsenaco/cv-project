{"version":3,"sources":["components/InputLabel.js","components/SectionItem.js","components/Button.js","components/FailSection.js","components/Section.js","components/ParentSection.js","objects/ObjectBuilder.js","objects/SectionItemObjects.js","objects/SectionButtonObjects.js","objects/ValidatorObjects.js","sections/GeneralInformation.js","sections/EducationalExperience.js","sections/PracticalExperience.js","sections/DownloadCV.js","components/Header.js","components/Footer.js","objects/PDFGenerator.js","App.js","index.js"],"names":["InputLabel","input","this","props","value","type","placeholder","id","icon","changeHandler","title","inputID","toLowerCase","concat","failed","undefined","toString","name","defaultValue","onChange","className","htmlFor","React","Component","SectionItem","length","Button","text","color","bgColor","clickHandler","onClick","FailSection","fails","map","fail","index","uniqid","Section","item","previewValue","replaceAll","button","buttons","editorState","filter","onlyView","onlyEditor","editor","submitHandler","items","some","getItemInputComponent","getItemViewComponent","filterButtonsByEditorState","getButtonComponent","ordered","onSubmit","noValidate","ParentSection","section","sections","getSectionComponent","createItemObject","sectionID","parentSectionID","defaultChangeHandler","bindEventHandler","createButtonObject","defaultClickHandler","createSectionObject","firstBind","defaultSubmitHandler","createParentSectionObject","validators","sectionModel","handler","bind","createValidatorObject","validatorCallback","validate","createValidatorItemObject","valid","createItemName","changeInputHandler","IconSignature","createItemEmail","IconAt","createItemPhoneNumber","IconPhone","createItemSchoolName","IconSchool","createItemTitleOfStudy","IconCertificate","createItemDateOfStudy","IconCalendar","createItemCompanyName","IconBuildingSkyscraper","createItemPositionTitle","IconBriefcase","createItemMainTasks","IconSubtask","createItemDateStartedJob","createItemDateStoppedJob","createSaveButton","IconCheck","createEditButton","toggleEditorHandler","IconEdit","createCloseEditorButton","IconX","createDeleteSectionButton","deleteSectionHandler","IconTrash","createExpandParentSectionButton","expandParentSectionHandler","IconPlus","createSaveAsPDFParentSectionButton","saveAsPDFParentSectionHandler","IconDeviceFloppy","getEmptyValueValidatorText","nameValidator","empty","emailRegEx","emailValidator","match","phoneNumberValidator","Number","isInteger","parseInt","schoolNameValidator","titleOfStudyValidator","dateOfStudyValidator","companyNameValidator","positionTitleValidator","mainTasksValidator","dateStartedJobValidator","dateStoppedJobValidator","GeneralInformation","getItemsArray","getButtonsArray","parentSection","getValidators","EducationalExperience","getSectionModel","PracticalExperience","Header","Footer","href","rel","target","ignoredParentSections","fonts","Roboto","normal","bold","italics","bolditalics","styles","parentSectionTitle","fontSize","margin","sectionTitle","sectionItemTitle","sectionItemValue","PDFCurriculum","stateObject","parentSections","Object","values","includes","content","push","style","pdfMake","createPdf","download","App","isValidItem","validator","validatorObject","saveAsPDFClickHandler","state","forEach","parent","updateData","_","event","checkInputTypoBySection","a","preventDefault","someFails","__","newSection","assign","createSectionObjectBySectionModel","generalInformation","getData","educationalExperience","practicalExperience","downloadCV","DownloadCV","topLevelObject","targetID","parentSectionKey","keys","key","callback","setState","prevState","getParentSectionObject","passList","pass","validation","getItemValidationData","itemPass","passData","getInputPassList","rewriteItemsByPassList","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8XAEqBA,E,4JACnB,WACE,IAMIC,EANJ,EAA8DC,KAAKC,MAA3DC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,KAAMC,EAArB,EAAqBA,YAAaC,EAAlC,EAAkCA,GAAIC,EAAtC,EAAsCA,KAAMC,EAA5C,EAA4CA,cACxCC,EAAQR,KAAKC,MAAMO,OAAS,GAC1BC,GAAWD,GAAS,IAAIE,cAAcC,OAAO,IAAKN,GAClDO,OACkBC,IAAtBb,KAAKC,MAAMW,OAAuBZ,KAAKC,MAAMW,OAAOE,WAAa,KA8BnE,OAzBEf,EADW,aAATI,EAEA,0BACES,OAAQA,EACRP,GAAII,EACJM,KAAMP,EAAME,cACZN,YAAaA,EACbD,KAAMA,EACNa,aAAcd,EACde,SAAUV,IAKZ,uBACEK,OAAQA,EACRP,GAAII,EACJM,KAAMP,EAAME,cACZN,YAAaA,EACbD,KAAMA,EACNa,aAAcd,EACde,SAAUV,IAMd,sBAAcW,UAAU,eAAxB,UACE,uBAAOC,QAASV,EAAhB,SAA0BD,IAC1B,sBAAKU,UAAU,+BAA+BN,OAAQA,EAAtD,UACGN,GAAQA,EAAK,IACbP,OAJKM,O,GArCwBe,IAAMC,WCAzBC,E,4JACnB,WACE,MAAsBtB,KAAKC,MAAnBO,EAAR,EAAQA,MAAOH,EAAf,EAAeA,GACXH,EAAQF,KAAKC,MAAMC,MAMvB,OAJKA,GAA0B,IAAjBA,EAAMqB,SAClBrB,EAAQ,eAIR,sBAAcgB,UAAU,oBAAxB,UACE,6BAAKV,IACL,4BAAIN,MAFIG,O,GAVyBe,IAAMC,WCC1BG,G,kKACnB,WACE,MAA+DxB,KAAKC,MAA5DwB,EAAR,EAAQA,KAAMnB,EAAd,EAAcA,KAAMoB,EAApB,EAAoBA,MAAOC,EAA3B,EAA2BA,QAASxB,EAApC,EAAoCA,KAAME,EAA1C,EAA0CA,GAAIuB,EAA9C,EAA8CA,aACxCV,EAAY,aAAaP,OAC7BgB,GAAW,UACX,IACAD,GAAS,IAEX,OACE,yBACER,UAAWA,EAEXf,KAAMA,GAAQ,SACd0B,QAASD,EAJX,UAMGtB,GAAQA,EAAK,IACbmB,IALIpB,O,GAXuBe,IAAMC,Y,gBCCrBS,G,kKACnB,WACE,IAAIC,EAAQ/B,KAAKC,MAAM8B,OAAS,GAUhC,OAAqB,KATrBA,EAAQA,EAAMC,KAAI,SAACC,EAAMC,GACvB,OACE,qBAAmBhB,UAAU,YAA7B,UACG,sBAAMA,UAAU,kBAAhB,SAAmCgB,EAAQ,EAAI,OAC/CD,IAFME,WAOHZ,OACD,KAIP,qBAAIL,UAAU,eAAd,UACE,4CACCa,S,GAnBgCX,IAAMC,YCG1Be,G,iLACnB,SAAuBC,EAAMzB,GAC3B,OACE,cAAC,EAAD,CAEEJ,MAAO6B,EAAK7B,MACZI,OAAQA,EACRV,MAAOmC,EAAKC,aACZnC,KAAMkC,EAAKlC,KACXC,YAAaiC,EAAKjC,YAClBC,GAAIgC,EAAKhC,GACTE,cAAe8B,EAAK9B,cACpBD,KAAM+B,EAAK/B,MARN+B,EAAKhC,M,kCAahB,SAAsBgC,GACpB,IAAInC,EAAQmC,EAAKnC,MAIjB,MAHkB,SAAdmC,EAAKlC,OACPD,EAAQmC,EAAKnC,MAAMqC,WAAW,IAAK,MAGnC,cAAC,EAAD,CACE/B,MAAO6B,EAAK7B,MACZN,MAAOA,EACPG,GAAIgC,EAAKhC,IACJgC,EAAKhC,M,gCAKhB,SAAoBmC,GAClB,OACE,cAAC,EAAD,CAEErC,KAAMqC,EAAOrC,KACbsB,KAAMe,EAAOf,KACbnB,KAAMkC,EAAOlC,KACbD,GAAImC,EAAOnC,GACXsB,QAASa,EAAOb,QAChBD,MAAOc,EAAOd,MACdE,aAAcY,EAAOZ,cAPhBY,EAAOnC,M,wCAYlB,SAA4BoC,EAASC,GACnC,OAAOD,EAAQE,QAAO,SAAAH,GACpB,QAAIA,EAAOI,WAAYF,MAInBF,EAAOK,aAAeH,Q,oBAO9B,WAAW,IAAD,OACR,EAA6C1C,KAAKC,MAA1CI,EAAR,EAAQA,GAAIyC,EAAZ,EAAYA,OAAQC,EAApB,EAAoBA,cAAevC,EAAnC,EAAmCA,MACnC,EAAgCR,KAAKC,MAA/B+C,EAAN,EAAMA,MAAOP,EAAb,EAAaA,QAASV,EAAtB,EAAsBA,MAiBtB,OAfAiB,EAAQA,EAAMhB,KAAI,SAAAK,GAChB,IAAIzB,EAIJ,OAHoB,OAAhByB,EAAKzB,SACPA,EAASmB,EAAMkB,MAAK,SAAAhB,GAAI,OAAIA,EAAK5B,KAAOgC,EAAKhC,OAE3CyC,EAAe,EAAKI,sBAAsBb,EAAMzB,GAC7C,EAAKuC,qBAAqBd,MAGnCI,GADAA,EAAUzC,KAAKoD,2BAA2BX,EAASK,IACjCd,KAAI,SAAAQ,GACpB,OAAO,EAAKa,mBAAmBb,MAGjCT,EAAQ,cAAC,EAAD,CAAauB,SAAS,EAAMvB,MAAOA,EAAMC,KAAI,SAAAC,GAAI,OAAIA,EAAKR,UAE9DqB,EAEA,0BAAkB5B,UAAU,UAA5B,UACGV,GAAS,6BAAKA,IACf,uBAAM+C,SAAUR,EAAe7B,UAAU,iBAAiBsC,YAAU,EAApE,UACE,qBAAKtC,UAAU,gBAAf,SAAgC8B,IAC/BjB,EACAU,OALSpC,GAWhB,0BAAkBa,UAAU,UAA5B,UACGV,GAAS,6BAAKA,IACf,qBAAKU,UAAU,gBAAf,SAAgC8B,IAC/BP,IAHWpC,O,GA5FiBe,IAAMC,YCFtBoC,G,+KACnB,SAAqBC,GACnB,OACE,cAAC,EAAD,CAEEX,cAAeW,EAAQX,cACvBC,MAAOU,EAAQV,MACfP,QAASiB,EAAQjB,QACjBV,MAAO2B,EAAQ3B,MACfe,OAAQY,EAAQZ,OAChBzC,GAAIqD,EAAQrD,GACZG,MAAOkD,EAAQlD,OAPVkD,EAAQrD,M,oBAYnB,WAAW,IAAD,OACJsD,EAAW3D,KAAKC,MAAM0D,UAAY,GAClClB,EAAUzC,KAAKC,MAAMwC,SAAW,GAqBpC,OAnBAkB,EAAWA,EAAS3B,KAAI,SAAA0B,GACtB,OAAO,EAAKE,oBAAoBF,MAGlCjB,EAAUA,EAAQT,KAAI,SAAAQ,GACpB,OACE,cAAC,EAAD,CAEErC,KAAMqC,EAAOrC,KACbsB,KAAMe,EAAOf,KACbnB,KAAMkC,EAAOlC,KACbD,GAAImC,EAAOnC,GACXsB,QAASa,EAAOb,QAChBD,MAAOc,EAAOd,MACdE,aAAcY,EAAOZ,cAPhBY,EAAOnC,OAahB,0BACEa,UAAW,kBAAkBP,OAAOX,KAAKC,MAAMiB,WAAa,IAD9D,UAIE,6BAAKlB,KAAKC,MAAMO,QACfmD,EACAlB,IAJIzC,KAAKC,MAAMI,Q,GA1CmBe,IAAMC,YCH3CwC,EAAmB,SACvBrD,EACAL,EACAC,EACAE,EACAC,EACAuD,EACAC,GAEI,IADJ1D,EACG,uDADE8B,MAEC6B,EAAuBzD,EAW7B,OATIA,IACFA,EAAgB0D,EACd1D,EACAF,EACAyD,EACAC,IAIG,CACLvD,QACAL,OACAC,cACAG,gBACAD,OACAgC,aAAc,GACdpC,MAAO,GACPU,OAAQ,KACRP,KACA2D,yBAIEE,EAAqB,SACzBzC,EACAtB,EACAG,EACAoB,EACAC,EACAiB,EACAC,EACAjB,EACAkC,EACAC,GAEI,IADJ1D,EACG,0DADE8B,MAECgC,EAAsBvC,EAU5B,OATIA,IACFA,EAAeqC,EACbrC,EACA,KACAkC,EACAC,IAIG,CACLtC,OACAtB,OACAG,OACAoB,QACAC,UACAiB,WACAC,aACAjB,eACAuC,sBACA9D,OAWE+D,EAAsB,SAC1B5D,EACAwC,EACAP,EACAK,EACAC,EACAsB,EACAN,GAEI,IADJ1D,EACG,uDADE8B,MAECmC,EAAuBvB,EAI7B,OAHIA,GAAiBsB,IACnBtB,EAAgBkB,EAAiBlB,EAAe,KAAM1C,EAAI0D,IAErD,CACLvD,QACAwC,QACAP,UACAK,SACAf,MAAO,GACP1B,KACA0C,gBACAuB,yBAIEC,EAA4B,SAChC/D,EACAmD,EACAa,EACAC,EACAhC,EACAvB,GAEI,IADJb,EACG,uDADE8B,MAEL,MAAO,CACL3B,QACAmD,WACAc,eACAD,aACA/B,UACApC,KACAa,cAIJ,SAAS+C,EAAkBS,EAASrE,EAAIyD,EAAWC,GACjD,GAAIW,EACF,OAAOA,EAAQC,KAAK,KAAMtE,EAAIyD,EAAWC,GAI7C,IAsDMa,EAAwB,SAACpE,EAAOL,EAAM0E,GAC1C,MAAO,CACLrE,QACAL,OACA2E,SAAUD,IAIRE,EAA4B,SAACC,GAAsB,IAAfvD,EAAc,uDAAP,GAC/C,MAAO,CACLuD,QACAvD,S,OCzLEwD,EAAiB,SAACnB,EAAWC,EAAiBmB,GAClD,OAAOrB,EACL,OACA,OACA,uBACAsB,IACAD,EACApB,EACAC,IAIEqB,EAAkB,SAACtB,EAAWC,EAAiBmB,GACnD,OAAOrB,EACL,QACA,QACA,wBACAwB,IACAH,EACApB,EACAC,IAIEuB,EAAwB,SAC5BxB,EACAC,EACAmB,GAEA,OAAOrB,EACL,eACA,SACA,+BACA0B,IACAL,EACApB,EACAC,IAIEyB,EAAuB,SAC3B1B,EACAC,EACAmB,GAEA,OAAOrB,EACL,cACA,OACA,yBACA4B,IACAP,EACApB,EACAC,IAIE2B,EAAyB,SAC7B5B,EACAC,EACAmB,GAEA,OAAOrB,EACL,iBACA,OACA,4BACA8B,IACAT,EACApB,EACAC,IAIE6B,EAAwB,SAC5B9B,EACAC,EACAmB,GAEA,OAAOrB,EACL,gBACA,OACA,2BACAgC,IACAX,EACApB,EACAC,IAIE+B,EAAwB,SAC5BhC,EACAC,EACAmB,GAEA,OAAOrB,EACL,eACA,OACA,0BACAkC,IACAb,EACApB,EACAC,IAIEiC,EAA0B,SAC9BlC,EACAC,EACAmB,GAEA,OAAOrB,EACL,iBACA,OACA,4BACAoC,IACAf,EACApB,EACAC,IAIEmC,EAAsB,SAC1BpC,EACAC,EACAmB,GAEA,OAAOrB,EACL,aACA,WACA,6BACAsC,IACAjB,EACApB,EACAC,IAIEqC,EAA2B,SAC/BtC,EACAC,EACAmB,GAEA,OAAOrB,EACL,mBACA,OACA,sBACAgC,IACAX,EACApB,EACAC,IAIEsC,EAA2B,SAC/BvC,EACAC,EACAmB,GAEA,OAAOrB,EACL,mBACA,OACA,sBACAgC,IACAX,EACApB,EACAC,ICvKEuC,EAAmB,SAACxC,EAAWC,GACnC,OAAOG,EACL,OACA,SACAqC,IACA,QACA,WACA,GACA,EACA,KACAzC,EACAC,IAIEyC,EAAmB,SAAC1C,EAAWC,EAAiB0C,GACpD,OAAOvC,EACL,OACA,KACAwC,IACA,QACA,QACA,GACA,EACAD,EACA3C,EACAC,IAIE4C,EAA0B,SAC9B7C,EACAC,EACA0C,GAEA,OAAOvC,EACL,QACA,KACA0C,IACA,QACA,QACA,GACA,EACAH,EACA3C,EACAC,IAIE8C,EAA4B,SAChC/C,EACAC,EACA+C,GAEA,OA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","file":"static/js/main.31c5571f.chunk.js","sourcesContent":["import React from 'react'\n\nexport default class InputLabel extends React.Component {\n  render () {\n    const { value, type, placeholder, id, icon, changeHandler } = this.props\n    let title = this.props.title || ''\n    const inputID = (title || '').toLowerCase().concat('-', id)\n    const failed =\n      this.props.failed !== undefined ? this.props.failed.toString() : null\n\n    let input\n\n    if (type === 'textarea') {\n      input = (\n        <textarea\n          failed={failed}\n          id={inputID}\n          name={title.toLowerCase()}\n          placeholder={placeholder}\n          type={type}\n          defaultValue={value}\n          onChange={changeHandler}\n        ></textarea>\n      )\n    } else {\n      input = (\n        <input\n          failed={failed}\n          id={inputID}\n          name={title.toLowerCase()}\n          placeholder={placeholder}\n          type={type}\n          defaultValue={value}\n          onChange={changeHandler}\n        />\n      )\n    }\n\n    return (\n      <div key={id} className='section-item'>\n        <label htmlFor={inputID}>{title}</label>\n        <div className='section-item-input-container' failed={failed}>\n          {icon && icon({})}\n          {input}\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\n\nexport default class SectionItem extends React.Component {\n  render () {\n    const { title, id } = this.props\n    let value = this.props.value\n\n    if (!value || value.length === 0) {\n      value = 'Not set yet'\n    }\n\n    return (\n      <div key={id} className='section-item view'>\n        <h5>{title}</h5>\n        <p>{value}</p>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport './../styles/Button.css'\n\nexport default class Button extends React.Component {\n  render () {\n    const { text, icon, color, bgColor, type, id, clickHandler } = this.props\n    const className = 'button bg-'.concat(\n      bgColor || 'default',\n      ' ',\n      color || ''\n    )\n    return (\n      <button\n        className={className}\n        key={id}\n        type={type || 'button'}\n        onClick={clickHandler}\n      >\n        {icon && icon({})}\n        {text}\n      </button>\n    )\n  }\n}\n","import React from 'react'\nimport uniqid from 'uniqid'\nimport './../styles/FailSection.css'\n\nexport default class FailSection extends React.Component {\n  render () {\n    let fails = this.props.fails || []\n    fails = fails.map((fail, index) => {\n      return (\n        <li key={uniqid()} className='fail-item'>\n          {<span className='fail-item-index'>{index + 1 + '. '}</span>}\n          {fail}\n        </li>\n      )\n    })\n\n    if (fails.length === 0) {\n      return null\n    }\n\n    return (\n      <ul className='fail-section'>\n        <h5>Fails list</h5>\n        {fails}\n      </ul>\n    )\n  }\n}\n","import React from 'react'\nimport InputLabel from './InputLabel'\nimport SectionItem from './SectionItem'\nimport Button from './Button'\nimport FailSection from './FailSection'\nimport './../styles/Section.css'\n\nexport default class Section extends React.Component {\n  getItemInputComponent (item, failed) {\n    return (\n      <InputLabel\n        key={item.id}\n        title={item.title}\n        failed={failed}\n        value={item.previewValue}\n        type={item.type}\n        placeholder={item.placeholder}\n        id={item.id}\n        changeHandler={item.changeHandler}\n        icon={item.icon}\n      />\n    )\n  }\n\n  getItemViewComponent (item) {\n    let value = item.value\n    if (item.type === 'date') {\n      value = item.value.replaceAll('-', '/')\n    }\n    return (\n      <SectionItem\n        title={item.title}\n        value={value}\n        id={item.id}\n        key={item.id}\n      />\n    )\n  }\n\n  getButtonComponent (button) {\n    return (\n      <Button\n        key={button.id}\n        type={button.type}\n        text={button.text}\n        icon={button.icon}\n        id={button.id}\n        bgColor={button.bgColor}\n        color={button.color}\n        clickHandler={button.clickHandler}\n      />\n    )\n  }\n\n  filterButtonsByEditorState (buttons, editorState) {\n    return buttons.filter(button => {\n      if (button.onlyView && editorState) {\n        return false\n      }\n\n      if (button.onlyEditor && !editorState) {\n        return false\n      }\n      return true\n    })\n  }\n\n  render () {\n    const { id, editor, submitHandler, title } = this.props\n    let { items, buttons, fails } = this.props\n\n    items = items.map(item => {\n      let failed\n      if (item.failed !== null) {\n        failed = fails.some(fail => fail.id === item.id)\n      }\n      if (editor) return this.getItemInputComponent(item, failed)\n      return this.getItemViewComponent(item)\n    })\n    buttons = this.filterButtonsByEditorState(buttons, editor)\n    buttons = buttons.map(button => {\n      return this.getButtonComponent(button)\n    })\n\n    fails = <FailSection ordered={true} fails={fails.map(fail => fail.text)} />\n\n    if (editor) {\n      return (\n        <section key={id} className='section'>\n          {title && <h4>{title}</h4>}\n          <form onSubmit={submitHandler} className='section-editor' noValidate>\n            <div className='section-items'>{items}</div>\n            {fails}\n            {buttons}\n          </form>\n        </section>\n      )\n    }\n    return (\n      <section key={id} className='section'>\n        {title && <h4>{title}</h4>}\n        <div className='section-items'>{items}</div>\n        {buttons}\n      </section>\n    )\n  }\n}\n","import React from 'react'\nimport Section from './Section'\nimport Button from './Button'\nimport './../styles/ParentSection.css'\n\nexport default class ParentSection extends React.Component {\n  getSectionComponent (section) {\n    return (\n      <Section\n        key={section.id}\n        submitHandler={section.submitHandler}\n        items={section.items}\n        buttons={section.buttons}\n        fails={section.fails}\n        editor={section.editor}\n        id={section.id}\n        title={section.title}\n      />\n    )\n  }\n\n  render () {\n    let sections = this.props.sections || []\n    let buttons = this.props.buttons || []\n\n    sections = sections.map(section => {\n      return this.getSectionComponent(section)\n    })\n\n    buttons = buttons.map(button => {\n      return (\n        <Button\n          key={button.id}\n          type={button.type}\n          text={button.text}\n          icon={button.icon}\n          id={button.id}\n          bgColor={button.bgColor}\n          color={button.color}\n          clickHandler={button.clickHandler}\n        />\n      )\n    })\n\n    return (\n      <article\n        className={'parent-section '.concat(this.props.className || '')}\n        key={this.props.id}\n      >\n        <h3>{this.props.title}</h3>\n        {sections}\n        {buttons}\n      </article>\n    )\n  }\n}\n","import uniqid from 'uniqid'\n\nconst createItemObject = (\n  title,\n  type,\n  placeholder,\n  icon,\n  changeHandler,\n  sectionID,\n  parentSectionID,\n  id = uniqid()\n) => {\n  const defaultChangeHandler = changeHandler\n\n  if (changeHandler) {\n    changeHandler = bindEventHandler(\n      changeHandler,\n      id,\n      sectionID,\n      parentSectionID\n    )\n  }\n\n  return {\n    title,\n    type,\n    placeholder,\n    changeHandler,\n    icon,\n    previewValue: '',\n    value: '',\n    failed: null,\n    id,\n    defaultChangeHandler\n  }\n}\n\nconst createButtonObject = (\n  text,\n  type,\n  icon,\n  color,\n  bgColor,\n  onlyView,\n  onlyEditor,\n  clickHandler,\n  sectionID,\n  parentSectionID,\n  id = uniqid()\n) => {\n  const defaultClickHandler = clickHandler\n  if (clickHandler) {\n    clickHandler = bindEventHandler(\n      clickHandler,\n      null,\n      sectionID,\n      parentSectionID\n    )\n  }\n\n  return {\n    text,\n    type,\n    icon,\n    color,\n    bgColor,\n    onlyView,\n    onlyEditor,\n    clickHandler,\n    defaultClickHandler,\n    id\n  }\n}\n\nconst createFailObject = (id, fail) => {\n  return {\n    id,\n    fail\n  }\n}\n\nconst createSectionObject = (\n  title,\n  items,\n  buttons,\n  editor,\n  submitHandler,\n  firstBind,\n  parentSectionID,\n  id = uniqid()\n) => {\n  const defaultSubmitHandler = submitHandler\n  if (submitHandler && firstBind) {\n    submitHandler = bindEventHandler(submitHandler, null, id, parentSectionID)\n  }\n  return {\n    title,\n    items,\n    buttons,\n    editor,\n    fails: [],\n    id,\n    submitHandler,\n    defaultSubmitHandler\n  }\n}\n\nconst createParentSectionObject = (\n  title,\n  sections,\n  validators,\n  sectionModel,\n  buttons,\n  className,\n  id = uniqid()\n) => {\n  return {\n    title,\n    sections,\n    sectionModel,\n    validators,\n    buttons,\n    id,\n    className\n  }\n}\n\nfunction bindEventHandler (handler, id, sectionID, parentSectionID) {\n  if (handler) {\n    return handler.bind(null, id, sectionID, parentSectionID)\n  }\n}\n\nconst createSectionObjectBySectionModel = (\n  sectionModel,\n  parentSectionID,\n  sectionID = uniqid()\n) => {\n  let section = Object.assign({}, sectionModel)\n\n  const items = section.items.map(item => {\n    const id = uniqid()\n    let changeHandler = bindEventHandler(\n      item.defaultChangeHandler,\n      id,\n      sectionID,\n      parentSectionID\n    )\n    return {\n      ...item,\n      id,\n      changeHandler\n    }\n  })\n\n  const buttons = section.buttons.map(button => {\n    const id = uniqid()\n    let clickHandler = bindEventHandler(\n      button.defaultClickHandler,\n      null,\n      sectionID,\n      parentSectionID\n    )\n\n    return {\n      ...button,\n      clickHandler,\n      id\n    }\n  })\n\n  let submitHandler = bindEventHandler(\n    section.defaultSubmitHandler,\n    null,\n    sectionID,\n    parentSectionID\n  )\n\n  return {\n    ...section,\n    id: sectionID,\n    items,\n    buttons,\n    submitHandler\n  }\n}\n\nconst createValidatorObject = (title, type, validatorCallback) => {\n  return {\n    title,\n    type,\n    validate: validatorCallback\n  }\n}\n\nconst createValidatorItemObject = (valid, text = '') => {\n  return {\n    valid,\n    text\n  }\n}\n\nexport {\n  createItemObject,\n  createButtonObject,\n  createParentSectionObject,\n  createSectionObject,\n  createFailObject,\n  createValidatorObject,\n  createValidatorItemObject,\n  createSectionObjectBySectionModel\n}\n","import {\n  IconSignature,\n  IconAt,\n  IconPhone,\n  IconSchool,\n  IconCertificate,\n  IconCalendar,\n  IconBuildingSkyscraper,\n  IconBriefcase,\n  IconSubtask\n} from '@tabler/icons'\nimport { createItemObject } from './ObjectBuilder'\n\nconst createItemName = (sectionID, parentSectionID, changeInputHandler) => {\n  return createItemObject(\n    'Name',\n    'text',\n    'Enter your name here',\n    IconSignature,\n    changeInputHandler,\n    sectionID,\n    parentSectionID\n  )\n}\n\nconst createItemEmail = (sectionID, parentSectionID, changeInputHandler) => {\n  return createItemObject(\n    'Email',\n    'email',\n    'Enter your email here',\n    IconAt,\n    changeInputHandler,\n    sectionID,\n    parentSectionID\n  )\n}\n\nconst createItemPhoneNumber = (\n  sectionID,\n  parentSectionID,\n  changeInputHandler\n) => {\n  return createItemObject(\n    'Phone number',\n    'number',\n    'Enter your phone number here',\n    IconPhone,\n    changeInputHandler,\n    sectionID,\n    parentSectionID\n  )\n}\n\nconst createItemSchoolName = (\n  sectionID,\n  parentSectionID,\n  changeInputHandler\n) => {\n  return createItemObject(\n    'School name',\n    'text',\n    'Enter school name here',\n    IconSchool,\n    changeInputHandler,\n    sectionID,\n    parentSectionID\n  )\n}\n\nconst createItemTitleOfStudy = (\n  sectionID,\n  parentSectionID,\n  changeInputHandler\n) => {\n  return createItemObject(\n    'Title of study',\n    'text',\n    'Enter title of study here',\n    IconCertificate,\n    changeInputHandler,\n    sectionID,\n    parentSectionID\n  )\n}\n\nconst createItemDateOfStudy = (\n  sectionID,\n  parentSectionID,\n  changeInputHandler\n) => {\n  return createItemObject(\n    'Date of study',\n    'date',\n    'Enter date of study here',\n    IconCalendar,\n    changeInputHandler,\n    sectionID,\n    parentSectionID\n  )\n}\n\nconst createItemCompanyName = (\n  sectionID,\n  parentSectionID,\n  changeInputHandler\n) => {\n  return createItemObject(\n    'Company name',\n    'text',\n    'Enter company name here',\n    IconBuildingSkyscraper,\n    changeInputHandler,\n    sectionID,\n    parentSectionID\n  )\n}\n\nconst createItemPositionTitle = (\n  sectionID,\n  parentSectionID,\n  changeInputHandler\n) => {\n  return createItemObject(\n    'Position title',\n    'text',\n    'Enter position title here',\n    IconBriefcase,\n    changeInputHandler,\n    sectionID,\n    parentSectionID\n  )\n}\n\nconst createItemMainTasks = (\n  sectionID,\n  parentSectionID,\n  changeInputHandler\n) => {\n  return createItemObject(\n    'Main tasks',\n    'textarea',\n    'Enter your main tasks here',\n    IconSubtask,\n    changeInputHandler,\n    sectionID,\n    parentSectionID\n  )\n}\n\nconst createItemDateStartedJob = (\n  sectionID,\n  parentSectionID,\n  changeInputHandler\n) => {\n  return createItemObject(\n    'Date you started',\n    'date',\n    'Enter the date here',\n    IconCalendar,\n    changeInputHandler,\n    sectionID,\n    parentSectionID\n  )\n}\n\nconst createItemDateStoppedJob = (\n  sectionID,\n  parentSectionID,\n  changeInputHandler\n) => {\n  return createItemObject(\n    'Date you stopped',\n    'date',\n    'Enter the date here',\n    IconCalendar,\n    changeInputHandler,\n    sectionID,\n    parentSectionID\n  )\n}\n\nexport {\n  createItemPhoneNumber,\n  createItemEmail,\n  createItemName,\n  createItemDateOfStudy,\n  createItemTitleOfStudy,\n  createItemSchoolName,\n  createItemDateStoppedJob,\n  createItemDateStartedJob,\n  createItemMainTasks,\n  createItemPositionTitle,\n  createItemCompanyName\n}\n","import {\n  IconCheck,\n  IconEdit,\n  IconX,\n  IconTrash,\n  IconPlus,\n  IconDeviceFloppy\n} from '@tabler/icons'\nimport { createButtonObject } from './ObjectBuilder'\n\nconst createSaveButton = (sectionID, parentSectionID) => {\n  return createButtonObject(\n    'Save',\n    'submit',\n    IconCheck,\n    'black',\n    'success',\n    false,\n    true,\n    null,\n    sectionID,\n    parentSectionID\n  )\n}\n\nconst createEditButton = (sectionID, parentSectionID, toggleEditorHandler) => {\n  return createButtonObject(\n    'Edit',\n    null,\n    IconEdit,\n    'black',\n    'info',\n    true,\n    false,\n    toggleEditorHandler,\n    sectionID,\n    parentSectionID\n  )\n}\n\nconst createCloseEditorButton = (\n  sectionID,\n  parentSectionID,\n  toggleEditorHandler\n) => {\n  return createButtonObject(\n    'Close',\n    null,\n    IconX,\n    'black',\n    'info',\n    false,\n    true,\n    toggleEditorHandler,\n    sectionID,\n    parentSectionID\n  )\n}\n\nconst createDeleteSectionButton = (\n  sectionID,\n  parentSectionID,\n  deleteSectionHandler\n) => {\n  return createButtonObject(\n    'Delete',\n    null,\n    IconTrash,\n    'black',\n    'danger',\n    false,\n    false,\n    deleteSectionHandler,\n    sectionID,\n    parentSectionID\n  )\n}\n\nconst createExpandParentSectionButton = (\n  sectionID,\n  parentSectionID,\n  expandParentSectionHandler\n) => {\n  return createButtonObject(\n    'Add',\n    null,\n    IconPlus,\n    'black',\n    'success',\n    false,\n    false,\n    expandParentSectionHandler,\n    sectionID,\n    parentSectionID\n  )\n}\n\nconst createSaveAsPDFParentSectionButton = (\n  sectionID,\n  parentSectionID,\n  saveAsPDFParentSectionHandler\n) => {\n  return createButtonObject(\n    'Save as PDF',\n    null,\n    IconDeviceFloppy,\n    'black',\n    'success',\n    false,\n    false,\n    saveAsPDFParentSectionHandler,\n    sectionID,\n    parentSectionID\n  )\n}\nexport {\n  createSaveAsPDFParentSectionButton,\n  createSaveButton,\n  createEditButton,\n  createCloseEditorButton,\n  createDeleteSectionButton,\n  createExpandParentSectionButton\n}\n","import {\n  createValidatorObject,\n  createValidatorItemObject\n} from './ObjectBuilder'\n\nfunction getEmptyValueValidatorText (value, title = '') {\n  if (!value || value.length === 0) {\n    let text = title.length > 0 ? title + ': ' : ''\n    text += 'Value cannot be empty'\n    return text\n  }\n}\n\nconst nameValidator = (() => {\n  return createValidatorObject('name', 'text', value => {\n    const empty = getEmptyValueValidatorText(value, 'Name')\n    if (empty) {\n      return createValidatorItemObject(false, empty)\n    }\n\n    return createValidatorItemObject(true)\n  })\n})()\n\n// Thank you Tikhonov from regex101 for this email regex\nconst emailRegEx = /^([a-z0-9]+(?:[._-][a-z0-9]+)*)@([a-z0-9]+(?:[.-][a-z0-9]+)*\\.[a-z]{2,})$/\n\nconst emailValidator = (() => {\n  return createValidatorObject('email', 'email', value => {\n    const empty = getEmptyValueValidatorText(value, 'Email')\n    if (empty) {\n      return createValidatorItemObject(false, empty)\n    }\n\n    if (!value.match(emailRegEx)) {\n      return createValidatorItemObject(\n        false,\n        'Email: Enter valid email address'\n      )\n    }\n\n    return createValidatorItemObject(true)\n  })\n})()\n\nconst phoneNumberValidator = (() => {\n  return createValidatorObject('phone number', 'number', value => {\n    const empty = getEmptyValueValidatorText(value, 'Phone number')\n    if (empty) {\n      return createValidatorItemObject(false, empty)\n    }\n\n    if (!Number.isInteger(parseInt(value))) {\n      return createValidatorItemObject(\n        false,\n        'Phone number: Enter valid phone number(insert only numbers)'\n      )\n    }\n\n    return createValidatorItemObject(true)\n  })\n})()\n\nconst schoolNameValidator = (() => {\n  return createValidatorObject('school name', 'text', value => {\n    const empty = getEmptyValueValidatorText(value, 'School name')\n    if (empty) {\n      return createValidatorItemObject(false, empty)\n    }\n\n    return createValidatorItemObject(true)\n  })\n})()\n\nconst titleOfStudyValidator = (() => {\n  return createValidatorObject('title of study', 'text', value => {\n    const empty = getEmptyValueValidatorText(value, 'Title of study')\n    if (empty) {\n      return createValidatorItemObject(false, empty)\n    }\n\n    return createValidatorItemObject(true)\n  })\n})()\n\nconst dateOfStudyValidator = (() => {\n  return createValidatorObject('date of study', 'date', value => {\n    const empty = getEmptyValueValidatorText(value, 'Date of study')\n    if (empty) {\n      return createValidatorItemObject(false, empty)\n    }\n\n    if (!value.match(/\\d{4}-\\d{2}-\\w{2}/)) {\n      return createValidatorItemObject(\n        false,\n        'Date of study: Insert valid date. Pattern: yyyy-mm-dd'\n      )\n    }\n\n    return createValidatorItemObject(true)\n  })\n})()\n\nconst companyNameValidator = (() => {\n  return createValidatorObject('company name', 'text', value => {\n    const empty = getEmptyValueValidatorText(value, 'Company name')\n    if (empty) {\n      return createValidatorItemObject(false, empty)\n    }\n\n    return createValidatorItemObject(true)\n  })\n})()\n\nconst positionTitleValidator = (() => {\n  return createValidatorObject('position title', 'text', value => {\n    const empty = getEmptyValueValidatorText(value, 'Position title')\n    if (empty) {\n      return createValidatorItemObject(false, empty)\n    }\n\n    return createValidatorItemObject(true)\n  })\n})()\n\nconst mainTasksValidator = (() => {\n  return createValidatorObject('Main tasks', 'textarea', value => {\n    const empty = getEmptyValueValidatorText(value, 'Main tasks')\n    if (empty) {\n      return createValidatorItemObject(false, empty)\n    }\n\n    return createValidatorItemObject(true)\n  })\n})()\n\nconst dateStartedJobValidator = (() => {\n  return createValidatorObject('date you started', 'date', value => {\n    const empty = getEmptyValueValidatorText(value, 'Date you started')\n    if (empty) {\n      return createValidatorItemObject(false, empty)\n    }\n\n    if (!value.match(/\\d{4}-\\d{2}-\\w{2}/)) {\n      return createValidatorItemObject(\n        false,\n        'Date you started: Insert valid date. Pattern: yyyy-mm-dd'\n      )\n    }\n\n    return createValidatorItemObject(true)\n  })\n})()\n\nconst dateStoppedJobValidator = (() => {\n  return createValidatorObject('date you stopped', 'date', value => {\n    const empty = getEmptyValueValidatorText(value, 'Date you stopped')\n    if (empty) {\n      return createValidatorItemObject(false, empty)\n    }\n\n    if (!value.match(/\\d{4}-\\d{2}-\\w{2}/)) {\n      return createValidatorItemObject(\n        false,\n        'Date you stopped: Insert valid date. Pattern: yyyy-mm-dd'\n      )\n    }\n\n    return createValidatorItemObject(true)\n  })\n})()\n\nexport {\n  nameValidator,\n  emailValidator,\n  phoneNumberValidator,\n  titleOfStudyValidator,\n  schoolNameValidator,\n  dateOfStudyValidator,\n  companyNameValidator,\n  dateStoppedJobValidator,\n  dateStartedJobValidator,\n  mainTasksValidator,\n  positionTitleValidator\n}\n","import uniqid from 'uniqid'\nimport {\n  createParentSectionObject,\n  createSectionObject\n} from './../objects/ObjectBuilder'\n\nimport {\n  createItemPhoneNumber,\n  createItemEmail,\n  createItemName\n} from './../objects/SectionItemObjects'\n\nimport {\n  createSaveButton,\n  createEditButton\n} from './../objects/SectionButtonObjects'\n\nimport {\n  nameValidator,\n  emailValidator,\n  phoneNumberValidator\n} from './../objects/ValidatorObjects'\n\nexport default class GeneralInformation {\n  constructor (changeInputHandler, toggleEditorHandler, submitHandler) {\n    this.changeInputHandler = changeInputHandler\n    this.toggleEditorHandler = toggleEditorHandler\n    this.sectionID = uniqid()\n    this.parentSectionID = uniqid()\n    this.items = this.getItemsArray(this.sectionID, this.parentSectionID)\n    this.buttons = this.getButtonsArray(this.sectionID, this.parentSectionID)\n\n    this.section = createSectionObject(\n      null,\n      this.items,\n      this.buttons,\n      true,\n      submitHandler,\n      true,\n      this.parentSectionID,\n      this.sectionID\n    )\n\n    this.parentSection = createParentSectionObject(\n      'General Information',\n      [this.section],\n      this.getValidators(),\n      null,\n      [],\n      null,\n      this.parentSectionID\n    )\n  }\n\n  getData () {\n    return this.parentSection\n  }\n\n  getItemsArray (sectionID, parentSectionID) {\n    return [\n      createItemName(sectionID, parentSectionID, this.changeInputHandler),\n      createItemEmail(sectionID, parentSectionID, this.changeInputHandler),\n      createItemPhoneNumber(sectionID, parentSectionID, this.changeInputHandler)\n    ]\n  }\n\n  getButtonsArray (sectionID, parentSectionID) {\n    return [\n      createSaveButton(sectionID, parentSectionID),\n      createEditButton(sectionID, parentSectionID, this.toggleEditorHandler)\n    ]\n  }\n\n  getValidators () {\n    return [nameValidator, emailValidator, phoneNumberValidator]\n  }\n}\n","import uniqid from 'uniqid'\nimport {\n  createParentSectionObject,\n  createSectionObject\n} from './../objects/ObjectBuilder'\n\nimport {\n  createItemDateOfStudy,\n  createItemTitleOfStudy,\n  createItemSchoolName\n} from './../objects/SectionItemObjects'\n\nimport {\n  createSaveButton,\n  createEditButton,\n  createCloseEditorButton,\n  createDeleteSectionButton,\n  createExpandParentSectionButton\n} from './../objects/SectionButtonObjects'\n\nimport {\n  titleOfStudyValidator,\n  schoolNameValidator,\n  dateOfStudyValidator\n} from './../objects/ValidatorObjects'\n\nexport default class EducationalExperience {\n  constructor (\n    changeInputHandler,\n    toggleEditorHandler,\n    submitHandler,\n    expandParentSectionHandler,\n    deleteSectionHandler\n  ) {\n    this.changeInputHandler = changeInputHandler\n    this.toggleEditorHandler = toggleEditorHandler\n    this.deleteSectionHandler = deleteSectionHandler\n    this.parentSectionID = uniqid()\n    this.buttons = [\n      createExpandParentSectionButton(\n        null,\n        this.parentSectionID,\n        expandParentSectionHandler\n      )\n    ]\n    this.parentSection = createParentSectionObject(\n      'Educational Experience',\n      [],\n      this.getValidators(),\n      this.getSectionModel(submitHandler),\n      this.buttons,\n      null,\n      this.parentSectionID\n    )\n  }\n\n  getSectionModel (submitHandler) {\n    let sectionID = uniqid()\n    let items = this.getItemsArray(sectionID, this.parentSectionID)\n    let buttons = this.getButtonsArray(sectionID, this.parentSectionID)\n\n    return createSectionObject(\n      'Educational Experience',\n      items,\n      buttons,\n      true,\n      submitHandler,\n      true,\n      this.parentSectionID,\n      sectionID\n    )\n  }\n\n  getData () {\n    return this.parentSection\n  }\n\n  getItemsArray (sectionID, parentSectionID) {\n    return [\n      createItemSchoolName(sectionID, parentSectionID, this.changeInputHandler),\n      createItemTitleOfStudy(\n        sectionID,\n        parentSectionID,\n        this.changeInputHandler\n      ),\n      createItemDateOfStudy(sectionID, parentSectionID, this.changeInputHandler)\n    ]\n  }\n\n  getButtonsArray (sectionID, parentSectionID) {\n    return [\n      createSaveButton(sectionID, parentSectionID),\n      createEditButton(sectionID, parentSectionID, this.toggleEditorHandler),\n      createCloseEditorButton(\n        sectionID,\n        parentSectionID,\n        this.toggleEditorHandler\n      ),\n      createDeleteSectionButton(\n        sectionID,\n        parentSectionID,\n        this.deleteSectionHandler\n      )\n    ]\n  }\n\n  getValidators () {\n    return [titleOfStudyValidator, schoolNameValidator, dateOfStudyValidator]\n  }\n}\n","import uniqid from 'uniqid'\nimport {\n  createParentSectionObject,\n  createSectionObject\n} from './../objects/ObjectBuilder'\n\nimport {\n  createItemDateStoppedJob,\n  createItemDateStartedJob,\n  createItemMainTasks,\n  createItemPositionTitle,\n  createItemCompanyName\n} from './../objects/SectionItemObjects'\n\nimport {\n  createSaveButton,\n  createEditButton,\n  createCloseEditorButton,\n  createDeleteSectionButton,\n  createExpandParentSectionButton\n} from './../objects/SectionButtonObjects'\n\nimport {\n  companyNameValidator,\n  dateStoppedJobValidator,\n  dateStartedJobValidator,\n  mainTasksValidator,\n  positionTitleValidator\n} from './../objects/ValidatorObjects'\n\nexport default class PracticalExperience {\n  constructor (\n    changeInputHandler,\n    toggleEditorHandler,\n    submitHandler,\n    expandParentSectionHandler,\n    deleteSectionHandler\n  ) {\n    this.changeInputHandler = changeInputHandler\n    this.toggleEditorHandler = toggleEditorHandler\n    this.deleteSectionHandler = deleteSectionHandler\n    this.parentSectionID = uniqid()\n    this.buttons = [\n      createExpandParentSectionButton(\n        null,\n        this.parentSectionID,\n        expandParentSectionHandler\n      )\n    ]\n    this.parentSection = createParentSectionObject(\n      'Practical Experience',\n      [],\n      this.getValidators(),\n      this.getSectionModel(submitHandler),\n      this.buttons,\n      null,\n      this.parentSectionID\n    )\n  }\n\n  getSectionModel (submitHandler) {\n    let sectionID = uniqid()\n    let items = this.getItemsArray(sectionID, this.parentSectionID)\n    let buttons = this.getButtonsArray(sectionID, this.parentSectionID)\n\n    return createSectionObject(\n      'Practical Experience',\n      items,\n      buttons,\n      true,\n      submitHandler,\n      true,\n      this.parentSectionID,\n      sectionID\n    )\n  }\n\n  getData () {\n    return this.parentSection\n  }\n\n  getItemsArray (sectionID, parentSectionID) {\n    return [\n      createItemCompanyName(\n        sectionID,\n        parentSectionID,\n        this.changeInputHandler\n      ),\n      createItemPositionTitle(\n        sectionID,\n        parentSectionID,\n        this.changeInputHandler\n      ),\n      createItemMainTasks(sectionID, parentSectionID, this.changeInputHandler),\n      createItemDateStartedJob(\n        sectionID,\n        parentSectionID,\n        this.changeInputHandler\n      ),\n      createItemDateStoppedJob(\n        sectionID,\n        parentSectionID,\n        this.changeInputHandler\n      )\n    ]\n  }\n\n  getButtonsArray (sectionID, parentSectionID) {\n    return [\n      createSaveButton(sectionID, parentSectionID),\n      createEditButton(sectionID, parentSectionID, this.toggleEditorHandler),\n      createCloseEditorButton(\n        sectionID,\n        parentSectionID,\n        this.toggleEditorHandler\n      ),\n      createDeleteSectionButton(\n        sectionID,\n        parentSectionID,\n        this.deleteSectionHandler\n      )\n    ]\n  }\n\n  getValidators () {\n    return [\n      companyNameValidator,\n      dateStoppedJobValidator,\n      dateStartedJobValidator,\n      mainTasksValidator,\n      positionTitleValidator\n    ]\n  }\n}\n","import uniqid from 'uniqid'\nimport { createParentSectionObject } from './../objects/ObjectBuilder'\nimport { createSaveAsPDFParentSectionButton } from './../objects/SectionButtonObjects'\n\nexport default class PracticalExperience {\n  constructor (saveAsPDFParentSectionHandler) {\n    this.parentSectionID = uniqid()\n\n    this.buttons = [\n      createSaveAsPDFParentSectionButton(\n        null,\n        this.parentSectionID,\n        saveAsPDFParentSectionHandler\n      )\n    ]\n\n    this.parentSection = createParentSectionObject(\n      'Download CV',\n      [],\n      null,\n      null,\n      this.buttons,\n      'download-cv',\n      this.parentSectionID\n    )\n  }\n\n  getData () {\n    return this.parentSection\n  }\n}\n","import React from 'react'\nimport { IconUser } from '@tabler/icons'\nimport './../styles/Header.css'\n\nexport default class Header extends React.Component {\n  render () {\n    return (\n      <header>\n        <IconUser className='logo' />\n        <div>\n          <h1>CV PROJECT</h1>\n          <p>Build your curriculum and export easy</p>\n        </div>\n      </header>\n    )\n  }\n}\n","import React from 'react'\nimport { IconBrandGithub } from '@tabler/icons'\nimport './../styles/Footer.css'\n\nexport default class Footer extends React.Component {\n  render () {\n    return (\n      <footer>\n        <a\n          href='https://github.com/gabesenacom/cv-project'\n          rel='noreferrer'\n          target='_blank'\n        >\n          <IconBrandGithub />\n          See our repository\n        </a>\n      </footer>\n    )\n  }\n}\n","import pdfMake from 'pdfmake'\n\nconst ignoredParentSections = ['Download CV']\n\nconst fonts = {\n  Roboto: {\n    normal:\n      'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.66/fonts/Roboto/Roboto-Regular.ttf',\n    bold:\n      'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.66/fonts/Roboto/Roboto-Medium.ttf',\n    italics:\n      'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.66/fonts/Roboto/Roboto-Italic.ttf',\n    bolditalics:\n      'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.66/fonts/Roboto/Roboto-MediumItalic.ttf'\n  }\n}\n\nconst styles = {\n  parentSectionTitle: {\n    fontSize: 28,\n    bold: true,\n    margin: [0, 20, 0, 0]\n  },\n  sectionTitle: {\n    fontSize: 24,\n    bold: true,\n    margin: [20, 5, 0, 0]\n  },\n  sectionItemTitle: {\n    fontSize: 20,\n    bold: true,\n    margin: [25, 5, 0, 0]\n  },\n  sectionItemValue: {\n    fontSize: 16,\n    bold: false,\n    margin: [30, 5, 0, 0]\n  }\n}\n\nconst PDFCurriculum = stateObject => {\n  const parentSections = Object.values(stateObject).filter(\n    parentSection => !ignoredParentSections.includes(parentSection.title)\n  )\n\n  let content = []\n\n  for (let parentSection of parentSections) {\n    content.push({ text: parentSection.title, style: 'parentSectionTitle' })\n\n    for (let section of parentSection.sections) {\n      if (section.title) {\n        content.push({ text: section.title, style: 'sectionTitle' })\n      }\n\n      for (let item of section.items) {\n        content.push({ text: item.title, style: 'sectionItemTitle' })\n        content.push({ text: item.value, style: 'sectionItemValue' })\n      }\n    }\n  }\n\n  pdfMake.createPdf({ content, styles }, null, fonts).download('curriculum.pdf')\n}\n\nexport default PDFCurriculum\n","import React from 'react'\nimport ParentSection from './components/ParentSection'\nimport GeneralInformation from './sections/GeneralInformation'\nimport EducationalExperience from './sections/EducationalExperience'\nimport PracticalExperience from './sections/PracticalExperience'\nimport DownloadCV from './sections/DownloadCV'\nimport Header from './components/Header'\nimport Footer from './components/Footer'\n\nimport {\n  createValidatorItemObject,\n  createSectionObjectBySectionModel\n} from './objects/ObjectBuilder'\nimport PDFCurriculum from './objects/PDFGenerator'\n\nexport default class App extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      generalInformation: new GeneralInformation(\n        this.changeInputHandler,\n        this.toggleEditorHandler,\n        this.submitHandler\n      ).getData(),\n      educationalExperience: new EducationalExperience(\n        this.changeInputHandler,\n        this.toggleEditorHandler,\n        this.submitHandler,\n        this.expandParentSectionHandler,\n        this.deleteSectionHandler\n      ).getData(),\n      practicalExperience: new PracticalExperience(\n        this.changeInputHandler,\n        this.toggleEditorHandler,\n        this.submitHandler,\n        this.expandParentSectionHandler,\n        this.deleteSectionHandler\n      ).getData(),\n      downloadCV: new DownloadCV(this.saveAsPDFClickHandler).getData()\n    }\n  }\n\n  isValidItem = (id, value, title, type, parentSection) => {\n    const validator = parentSection.validators.filter(\n      validator =>\n        validator.title.toLowerCase() === title.toLowerCase() &&\n        validator.type.toLowerCase() === type.toLowerCase()\n    )[0]\n    let validatorObject = validator\n      ? validator.validate(value)\n      : createValidatorItemObject(true)\n    validatorObject.id = id\n    return validatorObject\n  }\n\n  getParentSectionObject (topLevelObject, targetID) {\n    let parentsKeys = Object.keys(topLevelObject)\n    let parentSection = {}\n    let parentSectionKey\n\n    for (const key of parentsKeys) {\n      let parent = topLevelObject[key]\n      if (parent.id === targetID) {\n        parentSection = parent\n        parentSectionKey = key\n      }\n    }\n    return { parentSection, parentSectionKey }\n  }\n\n  getItemValidationData (item, parentSection) {\n    let validator = this.isValidItem(\n      item.id,\n      item.previewValue,\n      item.title,\n      item.type,\n      parentSection\n    )\n\n    return validator\n  }\n\n  saveAsPDFClickHandler = () => {\n    Object.values(this.state).forEach(parent => {\n      this.updateData(parent.id, parentSection => {\n        return parentSection.sections.map(section => {\n          return {\n            ...section,\n            editor: false\n          }\n        })\n      })\n    })\n\n    PDFCurriculum(this.state)\n  }\n\n  toggleEditorHandler = (_, sectionID, parentSectionID, event) => {\n    this.updateData(parentSectionID, parentSection => {\n      return parentSection.sections.map(section => {\n        let editor = section.editor\n        if (section.id === sectionID) {\n          editor = !editor\n        }\n\n        const items = section.items.map(item => {\n          item.previewValue = item.value\n          return item\n        })\n\n        return {\n          ...section,\n          items,\n          editor\n        }\n      })\n    })\n  }\n\n  changeInputHandler = (id, sectionID, parentSectionID, event) => {\n    const value = event.target.value\n\n    this.updateData(parentSectionID, parentSection => {\n      return parentSection.sections.map(section => {\n        let items = section.items\n        if (section.id === sectionID) {\n          items = items.map(item => {\n            let previewValue = item.previewValue\n\n            if (item.id === id) {\n              previewValue = value\n            }\n\n            return {\n              ...item,\n              previewValue\n            }\n          })\n        }\n\n        return {\n          ...section,\n          items\n        }\n      })\n    })\n\n    this.checkInputTypoBySection(sectionID, parentSectionID, id)\n  }\n\n  submitHandler = async (_, sectionID, parentSectionID, event) => {\n    event.preventDefault()\n    const { someFails } = await this.checkInputTypoBySection(\n      sectionID,\n      parentSectionID\n    )\n\n    if (!someFails) {\n      this.toggleEditorHandler(null, sectionID, parentSectionID, null)\n    }\n  }\n\n  expandParentSectionHandler = (_, __, parentSectionID, event) => {\n    this.updateData(parentSectionID, parentSection => {\n      const { sectionModel } = parentSection\n      const newSection = createSectionObjectBySectionModel(\n        sectionModel,\n        parentSectionID\n      )\n      return parentSection.sections.concat(newSection)\n    })\n  }\n\n  deleteSectionHandler = (_, sectionID, parentSectionID, event) => {\n    this.updateData(parentSectionID, parentSection => {\n      return parentSection.sections.filter(section => section.id !== sectionID)\n    })\n  }\n\n  async updateData (parentSectionID, callback) {\n    await this.setState(prevState => {\n      let { parentSection, parentSectionKey } = this.getParentSectionObject(\n        prevState,\n        parentSectionID\n      )\n\n      if (!parentSection) return {}\n\n      const sections = callback(parentSection)\n\n      parentSection = {\n        ...parentSection,\n        sections\n      }\n\n      return {\n        ['' + parentSectionKey + '']: parentSection\n      }\n    })\n  }\n\n  getInputPassList (items, parentSection) {\n    let someFails = false\n    let fails = []\n    const passList = items.map(item => {\n      let pass = true\n      let validation = this.getItemValidationData(item, parentSection)\n\n      if (!validation.valid) {\n        someFails = true\n        fails.push(validation)\n        pass = false\n      }\n\n      return { id: item.id, pass }\n    })\n    return { someFails, fails, passList }\n  }\n\n  rewriteItemsByPassList (items, passList, someFails, id) {\n    return items.map(item => {\n      if (id != null && item.id !== id) return item\n\n      let pass = passList.some(\n        itemPass => itemPass.pass && itemPass.id === item.id\n      )\n      let value = item.value\n      let failed = item.failed\n\n      if (pass && !someFails) {\n        value = item.previewValue\n      } else {\n        failed = true\n      }\n\n      return {\n        ...item,\n        value,\n        failed\n      }\n    })\n  }\n\n  async checkInputTypoBySection (sectionID, parentSectionID, id) {\n    let someFails = false\n    await this.updateData(parentSectionID, parentSection => {\n      return parentSection.sections.map(section => {\n        let items = section.items\n        let fails = section.fails\n        if (section.id === sectionID) {\n          fails = []\n\n          let passData = this.getInputPassList(items, parentSection)\n          fails = passData.fails\n          const passList = passData.passList\n          someFails = passData.someFails\n\n          items = this.rewriteItemsByPassList(items, passList, someFails, id)\n        }\n\n        return {\n          ...section,\n          items,\n          fails\n        }\n      })\n    })\n\n    return { someFails }\n  }\n\n  render () {\n    const parentSections = Object.values(this.state).map(parentSection => {\n      let { id, sections, title, buttons, className } = parentSection\n      return (\n        <ParentSection\n          className={className}\n          key={id}\n          sections={sections}\n          buttons={buttons}\n          id={id}\n          title={title}\n        />\n      )\n    })\n\n    return (\n      <main>\n        <Header />\n        {parentSections}\n        <Footer />\n      </main>\n    )\n  }\n}\n","import 'reset-css'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './styles/index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}